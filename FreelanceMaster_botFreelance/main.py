import telebot
from openpyxl import load_workbook
from io import BytesIO
from telebot import types
import pandas as pd
from datetime import datetime

TOKEN = 'YOUR_BOT_TOKEN'
bot = telebot.TeleBot(TOKEN)

FILE_PATH = r"D:\–§—Ä–∏–ª–∞–Ω—Å\–ó–ü\–ó–ü - –§–†–ò–õ–ê–ù–°.xlsx"
selected_sheet = None
user_data = {}

def send_message(chat_id, text, reply_markup=None):
    try:
        bot.send_message(chat_id, text, reply_markup=reply_markup)
    except Exception as e:
        print(f"Error sending message: {e}")

def create_main_menu_markup():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = ["üìÑ –í—ã–±—Ä–∞—Ç—å –ª–∏—Å—Ç", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"]
    markup.add(*[types.KeyboardButton(btn) for btn in buttons])
    return markup

def create_action_menu_markup():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = ["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    markup.add(*[types.KeyboardButton(btn) for btn in buttons])
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = create_main_menu_markup()
    send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üìÑ –í—ã–±—Ä–∞—Ç—å –ª–∏—Å—Ç")
def choose_sheet(message):
    sheets = get_sheet_names()
    if not sheets:
        send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤.")
        return

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add(*[types.KeyboardButton(sheet) for sheet in sheets])
    send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in get_sheet_names())
def set_sheet(message):
    global selected_sheet
    selected_sheet = message.text
    user_data[message.chat.id] = {"step": "none"}
    markup = create_action_menu_markup()
    send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω –ª–∏—Å—Ç: {selected_sheet}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
def start_edit_data(message):
    if not selected_sheet:
        send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç.")
        return

    user_data[message.chat.id] = {"step": "edit_id"}
    send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "edit_id")
def get_edit_id(message):
    user_data[message.chat.id]["edit_id"] = message.text.strip()
    user_data[message.chat.id]["step"] = "edit_data"
    send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–°—É–º–º–∞ –≥—Ä–Ω, –í—ã–ø–æ–ª–Ω–∏–ª, –î–∞—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã, –ü—Ä–∏—à–ª–∏ –¥–µ–Ω—å–≥–∏'. –ü—Ä–∏–º–µ—Ä: '700, ‚úÖ, 13.06.2024, ‚úÖ'")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "edit_data")
def process_edit_data(message):
    data = message.text.split(',', 3)

    if len(data) != 4:
        send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–°—É–º–º–∞ –≥—Ä–Ω, –í—ã–ø–æ–ª–Ω–∏–ª, –î–∞—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã, –ü—Ä–∏—à–ª–∏ –¥–µ–Ω—å–≥–∏'.")
        return

    amount, completed, payout_date, received = map(str.strip, data)
    id_value = user_data[message.chat.id].get("edit_id")

    if not id_value.isdigit():
        send_message(message.chat.id, "ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    id_value = int(id_value)
    payout_date = parse_date(payout_date)

    if not payout_date:
        send_message(message.chat.id, "–î–∞—Ç–∞ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '–î–î.–ú–ú.–ì–ì–ì–ì'.")
        return

    try:
        workbook = load_workbook(FILE_PATH)
        sheet = workbook[selected_sheet]
        for row in sheet.iter_rows(min_row=2):
            if row[0].value == id_value:
                row[1].value = amount
                row[2].value = completed
                row[3].value = format_date(payout_date)
                row[4].value = received
                workbook.save(FILE_PATH)
                send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                user_data[message.chat.id]["step"] = "none"
                return
        send_message(message.chat.id, "ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.")
    except Exception as e:
        send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        user_data[message.chat.id]["step"] = "none"

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
def add_data(message):
    if not selected_sheet:
        send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç.")
        return
    send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 'ID, –°—É–º–º–∞ –≥—Ä–Ω, –í—ã–ø–æ–ª–Ω–∏–ª, –î–∞—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã, –ü—Ä–∏—à–ª–∏ –¥–µ–Ω—å–≥–∏'. –ü—Ä–∏–º–µ—Ä: '14569, 800, ‚úÖ, 13.06.2024, ‚ùå'.")

@bot.message_handler(func=lambda message: message.text == "üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É")
def calculate_sum(message):
    if not selected_sheet:
        send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç.")
        return

    try:
        df = pd.read_excel(FILE_PATH, sheet_name=selected_sheet)
        total_sum = df['–°—É–º–º–∞ –≥—Ä–Ω'].sum()
        send_message(message.chat.id, f"–û–±—â–∞—è —Å—É–º–º–∞: {total_sum:.2f} –≥—Ä–Ω")
    except Exception as e:
        send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—É–º–º—ã: {e}")

@bot.message_handler(func=lambda message: message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
def start_delete_data(message):
    if not selected_sheet:
        send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç.")
        return

    user_data[message.chat.id] = {"step": "delete_id"}
    send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "delete_id")
def delete_data(message):
    id_value = message.text.strip()

    if not id_value.isdigit():
        send_message(message.chat.id, "ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    id_value = int(id_value)

    try:
        workbook = load_workbook(FILE_PATH)
        sheet = workbook[selected_sheet]
        rows_to_delete = []

        for row in sheet.iter_rows(min_row=2):
            if row[0].value == id_value:
                rows_to_delete.append(row[0].row)

        if not rows_to_delete:
            send_message(message.chat.id, "ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.")
            return

        for row_num in reversed(rows_to_delete):
            sheet.delete_rows(row_num)

        workbook.save(FILE_PATH)
        send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
    except Exception as e:
        send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    user_data[message.chat.id]["step"] = "none"

@bot.message_handler(func=lambda message: ',' in message.text)
def process_data(message):
    parts = message.text.split(',', 4)

    if len(parts) == 5:  # Handling Add Data
        handle_add_data(message, parts)

def handle_add_data(message, parts):
    id_value, amount, completed, payout_date, received = map(str.strip, parts)
    id_value = int(id_value)
    amount = float(amount)
    payout_date = parse_date(payout_date)

    if not payout_date:
        send_message(message.chat.id, "–î–∞—Ç–∞ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '–î–î.–ú–ú.–ì–ì–ì–ì'.")
        return

    payout_date = format_date(payout_date)

    try:
        workbook = load_workbook(FILE_PATH)
        sheet = workbook[selected_sheet]
        row_exists = False
        for row in sheet.iter_rows(min_row=2):
            if row[0].value == id_value:
                row_exists = True
                row[1].value = amount
                row[2].value = completed
                row[3].value = payout_date
                row[4].value = received
                break
        if not row_exists:
            sheet.append([id_value, amount, completed, payout_date, received])
        workbook.save(FILE_PATH)
        send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
    except Exception as e:
        send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

def parse_date(date_str):
    try:
        return datetime.strptime(date_str, "%d.%m.%Y")
    except ValueError:
        return None

def format_date(date_obj):
    return date_obj.strftime("%d.%m.%Y")

def get_sheet_names():
    try:
        workbook = load_workbook(FILE_PATH)
        return workbook.sheetnames
    except Exception as e:
        print(f"Error getting sheet names: {e}")
        return []

@bot.message_handler(func=lambda message: message.text == "üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def back_to_main_menu(message):
    user_data[message.chat.id] = {"step": "none"}
    markup = create_main_menu_markup()
    send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


if __name__ == "__main__":
    bot.polling(none_stop=True)
